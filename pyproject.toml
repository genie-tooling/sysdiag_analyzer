[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "sysdiag-analyzer"
# Version Bump for Phase 10 (eBPF, Child Proc Mon, Refinements)
version = "0.6.0" # Consider bumping to 0.7.0 or 1.0.0-beta.1 after these changes
authors = [
  { name="Systemd Smartfilter Architect Supreme", email="sysdiag@example.com" }, # Updated Author Info
]
description = "Systemd & System Health Diagnostic Tool with ML, LLM, eBPF & Child Process Analysis" # Updated description
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT License" } # Specify license correctly
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License", # Chosen license
    "Operating System :: POSIX :: Linux",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
    "Development Status :: 4 - Beta", # Moving towards Beta
]
dependencies = [
    "typer[all]>=0.9.0,<1.0.0",
    "rich>=13.0.0,<14.0.0",
    "psutil>=5.9.0,<6.0.0",
    # --- Native Bindings (Optional but Recommended) ---
    "cysystemd>=1.0.0; platform_system=='Linux'",
    "dbus-python>=1.2.16,<2.0.0; platform_system=='Linux'",
    # --- Config Parsing ---
    # `tomli` needed for Python < 3.11, `toml` module is built-in >= 3.11
    'tomli>=1.1.0,<3.0.0; python_version < "3.11"',
]

[project.scripts]
sysdiag-analyzer = "sysdiag_analyzer.main:app"

[project.urls]
"Homepage" = "https://github.com/systemd-smartfilter-architect/sysdiag-analyzer" # Updated URL
"Bug Tracker" = "https://github.com/systemd-smartfilter-architect/sysdiag-analyzer/issues" # Updated URL

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
markers = [
    "needs_dbus: mark test as requiring optional dbus-python package",
    "needs_cysystemd: mark test as requiring optional cysystemd package",
    "needs_networkx: mark test as requiring optional networkx package",
    "needs_ml: mark test as requiring optional ml dependencies (pandas, sklearn, lightgbm, joblib)",
    "needs_llm: mark test as requiring optional llm dependencies (ollama, tomli)",
    "needs_ebpf: mark test as requiring optional bcc package and root privileges", # Added eBPF marker
]


[tool.ruff]
line-length = 130
# select = ["E", "W", "F", "I", "UP"] # Example selection - Keep commented out unless user wants linting config

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    # Include optional runtime deps for testing if needed
    "cysystemd>=1.0.0; platform_system=='Linux'",
    "dbus-python>=1.2.16,<2.0.0; platform_system=='Linux'",
    "networkx>=3.0,<4.0",
    # Include ML deps in dev for comprehensive testing
    "pandas>=1.5.0,<3.0.0",
    "scikit-learn>=1.1.0,<2.0.0",
    "lightgbm>=3.3.0,<5.0.0",
    "joblib>=1.1.0,<2.0.0",
    # Include LLM deps in dev
    "ollama>=0.1.0,<0.2.0",
    'tomli>=1.1.0,<3.0.0; python_version < "3.11"',
    # Include eBPF deps in dev
    "bcc; platform_system=='Linux'", # Add bcc for eBPF
]
# Keep explicit groups for clarity if desired
native = [
    "cysystemd>=1.0.0; platform_system=='Linux'",
    "dbus-python>=1.2.16,<2.0.0; platform_system=='Linux'",
]
full-graph = [
    "networkx>=3.0,<4.0",
]
ml = [ # ML features group
    "pandas>=1.5.0,<3.0.0",
    "scikit-learn>=1.1.0,<2.0.0",
    "lightgbm>=3.3.0,<5.0.0", # For potential future prediction
    "joblib>=1.1.0,<2.0.0", # For model persistence
]
llm = [ # New group for LLM features
    "ollama>=0.1.0,<0.2.0", # Ollama client
    # Config parsing dependency
    'tomli>=1.1.0,<3.0.0; python_version < "3.11"',
]
ebpf = [ # New group for eBPF features
    "bcc; platform_system=='Linux'", # Python bindings for BPF Compiler Collection
]
